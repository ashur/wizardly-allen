---
title: Configure Feed
description: Customize the content of your feed
externalScripts:
  - "https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.8.2/dist/alpine.min.js"
---
{%- from "components/component.njk" import component with context -%}
<div
	x-data="app"
	x-init="init"
>
	<p
		class="[][][ status ]"
		x-show="status.message"
		x-text="status.message"
		style="display: none; position: fixed; bottom: 1em; right: 1em; left: 1em; padding: 0.75em 1.25em; color: #fff;"

		:class="status.type === 'error' ? 'error' : ( status.type === 'success' ? 'success' : '' )"
	></p>

	{{ component( "TagList", { tags: postTags.tags } ) }}

	<fieldset
		class="[][ stack ][]"
		:disabled="!model.hash"
	>
		{{ component( "FeedUrl" ) }}

		{{ component( "FeedFormat" ) }}
	</fieldset>
</div>

<script>
	let api = {
		url: "/api/v1",

		getSubscription( subscriptionHash )
		{
			return fetch( `${this.url}/subscriptions/${subscriptionHash}` )
				.then( response => response.json() )
				.then( data =>
				{
					return data.subscription;
				})
				.catch( error =>
				{
					console.error( error );
				});
		},

		updateSubscription( property )
		{
			let value = Array.isArray( app.model[property] )
				? JSON.stringify( app.model[property] )
				: app.model[property];

			let options = {
				method: "PUT",
				body: JSON.stringify({
					[property]: value
				}),
				headers: {
					'Content-Type': 'application/json'
				},
				redirect: 'follow',
			};

			return fetch( `${this.url}/subscriptions/${app.model.hash}`, options )
				.then( response => response.json() )
				.then( data =>
				{
					if( data.subscription )
					{
						return data.subscription;
					}
					else
					{
						return {
							error: true,
						};
					}
				})
				.catch( error =>
				{
					console.error( error );
				});
		},
	};

	let app = {

		model: {},

		status: {
			message: "Loading...",
			type: null,
			timeout: null,
		},

		/* Methods */
		async copyUrl()
		{
			try
			{
				navigator.clipboard.writeText( this.feedUrl );
				this.setStatus( "Copied feed URL", "success" );
			}
			catch( error )
			{
				this.setStatus( error.message, "error" );
			}
		},

		get feedUrl()
		{
			return `{{ site.url }}/feed/${this.model.hash || ""}`;
		},

		async init()
		{
			let url = new URL( window.location.href );
			let subscriptionHash = url.pathname.split( "/" )[2];

			if( subscriptionHash === "" )
			{
				window.location.href = "/";
				return;
			}

			try
			{
				let subscription = await api.getSubscription( subscriptionHash );
				if( subscription )
				{
					this.model = subscription;
				}
				else
				{
					this.setStatus( "The feed you requested could not be found", "error" );
				}
			}
			catch( error )
			{
				console.error( error );
			}
		},

		setStatus( message, type )
		{
			if( this.status.timeout )
			{
				clearTimeout( this.status.timeout );
			}

			this.status.message = message;
			this.status.type = type;

			if( type === "success" )
			{
				this.status.timeout = setTimeout( () =>
				{
					this.status.message = "";
					this.status.type = null;

				}, 2000 );
			}
		},

		async toggleTag( tag )
		{
			let ignoredTagsIndex = this.model.ignored_tags.indexOf( tag.toLowerCase() );
			if( ignoredTagsIndex > -1 )
			{
				this.model.ignored_tags.splice( ignoredTagsIndex, 1 );
			}
			else
			{
				this.model.ignored_tags.push( tag.toLowerCase() );
			}

			this.updateSubscription( "ignored_tags" );
		},

		async updateSubscription( property )
		{
			this.setStatus( "Saving..." );
			let result = await api.updateSubscription( property );

			if( result.error )
			{
				this.setStatus( result.error, "error" );
			}
			else
			{
				this.setStatus( "Saved", "success" )
			}
		},
	};
</script>

<style>
	.status {
		background-color: #4d5562;
	}
	.status.success {
		background-color: #42936c;
		color: white;
	}
	.status.error {
		background-color: #8d2822;
		color: white;
	}

	.loading label {
		background: linear-gradient(90deg, rgba(187, 187, 196, 0.5), rgba(187, 187, 196, 0.1));
		background-size: 200% 200%;
		color: transparent;
		border-radius: 4px;
		animation: labelGradient 3s ease infinite;
	}

	@keyframes labelGradient {
		0% {
			background-position: 0% 50%;
		}
		50% {
			background-position: 100% 50%;
		}
		100% {
			background-position: 0% 50%;
		}
	}
</style>
