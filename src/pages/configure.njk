---
title: Configure your feed
description: Customize the content of your feed
externalScripts:
  - "https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.8.2/dist/alpine.min.js"
defaults:
  format: xml
---
<div
	x-data="app"
	x-init="init"
>
	<p
		class="[][][ status ]"
		x-show="status.message"
		x-text="status.message"
		style="display: none; position: fixed; bottom: 0em; right: 1em; left: 1em; padding: 0.75em 1.25em; color: #fff;"

		:class="status.type === 'error' ? 'error' : ( status.type === 'success' ? 'success' : '' )"
	></p>

	<ul style="list-style-type: none; padding: 1em;">
	{% for tag in (postTags.tags.slice( 0, 5 ) | sort) %}
		<li>
			<input
				type="checkbox"
				id="tag-{{ tag }}"
				:checked="!subscription.found || (subscription.ignoredTags && !subscription.ignoredTags.includes( '{{ tag | lower}}' ))"
				:disabled="!subscription.found"
				@click="toggleTag( '{{ tag }}' )"

				checked
				disabled
			/>
			<label for="tag-{{ tag }}">{{ tag }}</label>
		</li>
	{% endfor %}
	</ul>

	<details>
		<summary>Additional topics</summary>
		<ul>
			{% for tag in (postTags.tags.slice( 5 ) | sort) %}
				<li>
					<input
						type="checkbox"
						id="tag-{{ tag }}"
						:checked="!subscription.found || (subscription.ignoredTags && !subscription.ignoredTags.includes( '{{ tag | lower}}' ))"
						:disabled="!subscription.found"
						@click="toggleTag( '{{ tag }}' )"

						checked
						disabled
					/>
					<label for="tag-{{ tag }}">{{ tag }}</label>
				</li>
			{% endfor %}
		</ul>
	</details>

	{# <form> #}
		<fieldset
			:disabled="!subscription.found"
		>
			<input
				type="text"
				value="{{ site.url }}/feed/"
				x-model="subscription.url"
			/>
			<button
				@click="status.message = 'Copied!'; status.type = 'success'"
			>Copy</button>

			<div>
				<input
					type="radio"
					id="format-json"
					name="format"
					:checked="subscription.format === 'json'"
					@click="subscription.format = 'json'"
				/>
				<label for="format-json">JSON</label>

				<input
					type="radio"
					id="format-xml"
					name="format"
					:checked="subscription.format === 'xml'"
					@click="subscription.format = 'xml'"
				/>
				<label for="format-xml">XML</label>
			</div>
		</fieldset>
	{# </form> #}

</div>

<script>
	let api = {
		url: "/api/v1",

		getSubscription( subscriptionHash )
		{
			return fetch( `${this.url}/subscriptions/${subscriptionHash}` )
				.then( response => response.json() )
				.then( data =>
				{
					return data.subscription;
				})
				.catch( error =>
				{
					console.error( error );
				});
		},

		getTags()
		{
			return fetch( `${this.url}/static/tags` )
				.then( response => response.json() )
				.then( data =>
				{
					return data.tags;
				})
				.catch( error =>
				{
					console.error( error );
				});
		},

		updateSubscription( subscriptionHash, ignoredTags )
		{
			return fetch( `${this.url}/subscriptions/${subscriptionHash}`,
					{
						method: "PUT",
						body: JSON.stringify( {
							"ignored_tags": JSON.stringify( ignoredTags ),
						}),
						headers: {
							'Content-Type': 'application/json'
						},
						redirect: 'follow',
					}
				)
				.then( response => response.json() )
				.then( data =>
				{
					if( data.subscription )
					{
						return data.subscription;
					}
					else
					{
						return {
							error: true,
						};
					}
				})
				.catch( error =>
				{
					console.error( error );
				});
		},
	};

	let app = {
		subscription: {
			hash: "",
			ignoredTags: null,
			found: null,

			format: "{{ defaults.format }}",
			get url()
			{
				let extension = this.format == "json" ? "" : ".xml";
				return `{{ site.url }}/feed/${this.hash}${extension}`;
			},
		},

		status: {
			message: "Loading...",
			error: false,
			type: null,
		},
		async toggleTag( tag )
		{
			let ignoredTagsIndex = this.subscription.ignoredTags.indexOf( tag.toLowerCase() );
			if( ignoredTagsIndex > -1 )
			{
				this.subscription.ignoredTags.splice( ignoredTagsIndex, 1 );
			}
			else
			{
				this.subscription.ignoredTags.push( tag.toLowerCase() );
			}

			let result = await api.updateSubscription( this.subscription.hash, this.subscription.ignoredTags );
			if( result.error )
			{
				this.status.message = "There was a problem...";
				this.status.type = error;
			}
			else
			{
				this.status.message = "Changes saved";
				this.status.type = "success";
				setTimeout( () => this.status = { message: '', type: null }, 1750 );
			}
		},

		/* Methods */
		async init()
		{
			let url = new URL( window.location.href );
			let subscriptionHash = url.pathname.split( "/" )[2];

			if( subscriptionHash === "" )
			{
				window.location.href = "/";
				return;
			}

			this.subscription.hash = subscriptionHash;
			try
			{
				let subscription = await api.getSubscription( subscriptionHash );
				if( subscription )
				{
					this.subscription.found = true;
					this.subscription.ignoredTags = subscription["ignored_tags"];
					this.status.message = null;
				}
				else
				{
					this.status.message = "The feed you requested could not be found";
					this.status.type = "error";
					this.subscription.found = false;
				}
			}
			catch( error )
			{
				console.error( error );
			}
		},
	};
</script>

<style>
	.status {
		background-color: #4d5562;
	}
	.status.success {
		background-color: #42936c;
		color: white;
	}
	.status.error {
		background-color: #8d2822;
		color: white;
	}
</style>