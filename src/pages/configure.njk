---
title: Configure your feed
description: Customize the content of your feed
externalScripts:
  - "https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.8.2/dist/alpine.min.js"
---
<div
	x-data="app"
	x-init="init"
>
	<p
		x-show="status"
		x-text="status"
		style="display: none;"
	></p>

	{% for tag in (postTags.tags.slice( 0, 5 ) | sort) %}
		<li>
			<input
				type="checkbox"
				id="tag-{{ tag }}"
				:checked="!subscription.found || (subscription.ignoredTags && !subscription.ignoredTags.includes( '{{ tag | lower}}' ))"
				:disabled="!subscription.found"
				@click="toggleTag( '{{ tag }}' )"

				checked
				disabled
			/>
			<label for="tag-{{ tag }}">{{ tag }}</label>
		</li>
	{% endfor %}

	<h2>Other Tags</h2>

	{% for tag in (postTags.tags.slice( 5 ) | sort) %}
		<li>
			<input
				type="checkbox"
				id="tag-{{ tag }}"
				:checked="!subscription.found || (subscription.ignoredTags && !subscription.ignoredTags.includes( '{{ tag | lower}}' ))"
				:disabled="!subscription.found"
				@click="toggleTag( '{{ tag }}' )"

				checked
				disabled
			/>
			<label for="tag-{{ tag }}">{{ tag }}</label>
		</li>
	{% endfor %}

	<div
		x-show="subscription.found === false"
		style="display: none;"
	>
		<p>The feed you requested could not be found. <a href="/subscribe">Subscribe now.</a></p>
	</div>

	{# <div
		x-show="subscription.ignoredTags"
		style="display: none;"
	>
		<h2>Popular Tags</h2>
		<ul
			x-show="subscription.ignoredTags"
		>
			<template x-for="tag in popularTags">
				<li>
					<input
						type="checkbox"
						:checked="subscription.ignoredTags && !subscription.ignoredTags.includes( tag.toLowerCase() )"
						@click="toggleTag(tag)"
					/>
					<label x-text="tag"></label>
				</li>
			</template>
		</ul>
	</div>

	<div
		x-show="subscription.ignoredTags && otherTags.length > 0"
		style="display: none;"
	>
		<h2>Other Tags</h2>
		<ul>
			<template x-for="tag in otherTags">
				<li>
					<input
						type="checkbox"
						:checked="subscription.ignoredTags && !subscription.ignoredTags.includes( tag.toLowerCase() )"
						@click="toggleTag(tag)"
					/>
					<label x-text="tag"></label>
				</li>
			</template>
		</ul>
	</div> #}
</div>

<script>
	let api = {
		url: "/api/v1",

		getSubscription( subscriptionHash )
		{
			return fetch( `${this.url}/subscriptions/${subscriptionHash}` )
				.then( response => response.json() )
				.then( data =>
				{
					return data.subscription;
				})
				.catch( error =>
				{
					console.error( error );
				});
		},

		getTags()
		{
			return fetch( `${this.url}/static/tags` )
				.then( response => response.json() )
				.then( data =>
				{
					return data.tags;
				})
				.catch( error =>
				{
					console.error( error );
				});
		},

		updateSubscription( subscriptionHash, ignoredTags )
		{
			return fetch( `${this.url}/subscriptions/${subscriptionHash}`,
					{
						method: "PUT",
						body: JSON.stringify( {
							"ignored_tags": JSON.stringify( ignoredTags ),
						}),
						headers: {
							'Content-Type': 'application/json'
						},
						redirect: 'follow',
					}
				)
				.then( response => response.json() )
				.then( data =>
				{
					if( data.subscription )
					{
						return data.subscription;
					}
					else
					{
						return {
							error: true,
						};
					}
				})
				.catch( error =>
				{
					console.error( error );
				});
		},
	};

	let app = {
		subscription: {
			hash: "",
			ignoredTags: null,
			found: null,
		},

		status: null,
		async toggleTag( tag )
		{
			let ignoredTagsIndex = this.subscription.ignoredTags.indexOf( tag.toLowerCase() );
			if( ignoredTagsIndex > -1 )
			{
				this.subscription.ignoredTags.splice( ignoredTagsIndex, 1 );
			}
			else
			{
				this.subscription.ignoredTags.push( tag.toLowerCase() );
			}

			let result = await api.updateSubscription( this.subscription.hash, this.subscription.ignoredTags );
			if( result.error )
			{
				this.status = "ðŸŽˆ There was a problem...";
			}
			else
			{
				this.status = "âœ… Saved!";
				setTimeout( () => this.status = null, 1500 );
			}
		},

		/* Methods */
		async init()
		{
			let url = new URL( window.location.href );
			let subscriptionHash = url.pathname.split( "/" )[2];

			if( subscriptionHash === "" )
			{
				window.location.href = "/";
				return;
			}

			this.subscription.hash = subscriptionHash;
			try
			{
				let subscription = await api.getSubscription( subscriptionHash );
				if( subscription )
				{
					this.subscription.found = true;
					this.subscription.ignoredTags = subscription["ignored_tags"];
				}
				else
				{
					this.subscription.found = false;
				}
			}
			catch( error )
			{
				console.error( error );
			}
		},
	};
</script>
